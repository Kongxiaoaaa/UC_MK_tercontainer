#!/data/data/com.termux/files/usr/bin/bash
# ██╗ ██╗  ██╗ ██████╗  █████╗   ███████╗ ██╗  ██╗
#████████╗ ██║ ██╔══██╗ ██╔══██╗ ██╔════╝ ██║  ██║
#╚██╔═██╔╝ ██║ ██████╔╝ ███████║ ███████╗ ███████║
#████████╗ ╚═╝ ██╔══██╗ ██╔══██║ ╚════██║ ██╔══██║
#╚██╔═██╔╝ ██╗ ██████╔╝ ██║  ██║ ███████║ ██║  ██║
# ╚═╝ ╚═╝  ╚═╝ ╚═════╝  ╚═╝  ╚═╝ ╚══════╝ ╚═╝  ╚═╝
###### Github@Moe-hacker ######
#•.,¸,.•*¯`•.,¸,.•....╭━━━━━━━━━╮
#`•.,¸,.•*¯`•.,¸,.•*¯.|::::::::::/\__/\
#`•.,¸,.•*¯`•.,¸,.•* <|:::::::::(｡ ●ω●｡)
#`•.,¸,.•*¯`•.,¸,.•*  ╰し--し--Ｊ･ﾟ
###### E-mail: moe-hacker@outlook.com ######
######  Blog: cnblogs.com/Moe-hacker  ######
LOAD_GLOBAL_CONFIG(){
  if [[ -e $PREFIX/etc/container/global.conf ]];then
    source $PREFIX/etc/container/global.conf
  else
    echo -e "\a\033[31m[]错误:未找到全局配置!"
    exit 1
  fi
}
LOAD_CONTAINER_CONFIG(){
  if [[ -e $PREFIX/etc/container/container-${CONTAINER}.conf ]];then
    source $PREFIX/etc/container/container-${CONTAINER}.conf
  else
    echo -e "\a\033[31m[]错误:未找到容器，你可能需要执行container -S来切换容器或container -c来创建一个容器"
    exit 1
  fi
}
GET_CPU_ARCH(){
  DPKG_ARCH=$(dpkg --print-architecture)
  case ${DPKG_ARCH} in
    armel) export ARCH="armel" ;;
    armv7* | armv8l | armhf | arm) export ARCH="armhf" ;;
    aarch64 | arm64* | armv8* | arm*) export ARCH="arm64" ;;
    i*86 | x86) export ARCH="i386" ;;
    x86_64 | amd64) export ARCH="amd64" ;;
    *) echo -e "\e[38;5;196m\a[]错误:未知CPU架构!"&&exit 1 ;;
  esac
  return 0
}
DOWNLOAD_ROOTFS(){
  echo -e "当前支持的系统:"
  echo -e "debian,ubuntu,kali,parrot,fedora,centos,archlinux,alpine,oracle,amazonlinux,voidlinux,opensuse,almalinux,alt,apertis,rockylinux,devuan,gentoo"
  read -p "[] 选择要安装的系统: " OS
  case $OS in
    "amazonlinux"|"archlinux"|"kali"|"voidlinux"|"parrot") export VERSION=current;;
    *)
      echo -e "当前支持的版本号: "
      for i in $(curl -sL http://images.linuxcontainers.org/images/${OS}|grep "DIR"|sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2 |cut -d "/" -f 1);do
        echo $i
      done
      read -p "[] 选择要安装的系统版本: " VERSION;;
  esac
  if [[ ${CROSS_ARCH} != "null" && ${CROSS_ARCH} != "" ]];then
    case ${CROSS_ARCH} in
      "aarch64") export ARCH="arm64";;
      "arm") export ARCH="armhf";;
      "i386") export ARCH="i386";;
      "m68k") export ARCH="m68k";;
      "ppc") export ARCH="ppc";;
      "ppc64") export ARCH="ppc64";;
      "riscv32") export ARCH="riscv32";;
      "riscv64") export ARCH="riscv64";;
      "x86_64") export ARCH="amd64";;
    esac
  else
    GET_CPU_ARCH
  fi
  DOWNLOAD_COMMON_ROOTFS(){
    MIRROR="http://images.linuxcontainers.org/images"
    if [[ $OS = "gentoo" ]];then
      VERSION2="openrc"
    else
      VERSION2="default"
    fi
    TIME=$(curl -sL ${MIRROR}/${OS}/${VERSION}/${ARCH}/${VERSION2}|grep "DIR" |sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2 |cut -d "/" -f 2|tail -n 1)
    if [[ ${TIME} = "" ]];then
      echo -e "\e[38;5;196m\a[] 错误:未找到rootfs!"
      exit 1
    fi
    [[ -e $PREFIX/tmp/container ]]||mkdir -p $PREFIX/tmp/container
    cd $PREFIX/tmp/container
    URL=${MIRROR}/${OS}/${VERSION}/${ARCH}/${VERSION2}/${TIME}/rootfs.tar.xz
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 下载rootfs"|pv -qL 40
    axel -n16 ${URL}
    return 0
  }
  DOWNLOAD_PARROT_ROOTFS(){
    mkdir -p $PREFIX/tmp/container
    cd $PREFIX/tmp/container
    ROOTFS=$(curl -sL https://download.parrot.sh/parrot/iso/testing|grep title|sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2|tail -n +5|grep ".tar.xz"|grep ${ARCH}|head -n 1)
    if [[ ${ROOTFS} = "" ]];then
      echo -e "\e[38;5;196m\a[] 错误:未找到rootfs!"
      exit 1
    fi
    URL="https://download.parrot.sh/parrot/iso/testing/${ROOTFS}"
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 下载rootfs"|pv -qL 40
    axel -n16 ${URL}
    echo "[] 正在构建parrot的rootfs，这可能需要一段时间..."
    sleep 2s
    tar -xvf ${ROOTFS}
    cd parrot-${ARCH}
    tar -cvJf ../rootfs.tar.xz .
    cd ..
    rm ${ROOTFS}
    rm -rf parrot-${ARCH}
    return 0
  }
  case $OS in
      "parrot") DOWNLOAD_PARROT_ROOTFS;;
      *) DOWNLOAD_COMMON_ROOTFS;;
  esac
  return 0
}
CREATE_CHROOT_CONTAINER(){
  while :
  do
    read -p "[] 请输入容器名,不可包含空格: " NAME
    if [[ $NAME != "" ]];then
      break
    fi
  done
  while :
  do
    read -p "[] 创建一个新的普通用户[y/n]? " CREATE_NEW_USER
    if [[ ${CREATE_NEW_USER} = "n" || ${CREATE_NEW_USER} = "y" ]];then
      break
    fi
  done
  if [[ ${CREATE_NEW_USER} = "y" ]];then
    while :
    do
      read -p "[] 请输入用户名: " NEW_USER
      if [[ ${NEW_USER} != "" ]];then
        break
      fi
    done
    while :
    do
      read -p "[] 请输入密码: " PASSWORD
      if [[ ${PASSWORD} != "" ]];then
        break
      fi
    done
  echo -e "[] 如果sudo报错无法使用，请重装sudo."
  fi
  echo -e "[] 容器绝对路径是用来存放容器的路径，例如，你可以用使用/data/container-容器名，但不要用/sdcard下的目录!!!"|pv -qL 40
  read -p "[] 请输入容器的绝对路径，不可包含空格: " CONTAINER_DIR
  for BLACKLIST in {/bin/,/dev/,/odm/,/oem/,/proc/,/product/,/sys/,/system/,/vendor/};do
    if [[ $CONTAINER_DIR = $BLACKLIST* ]];then
      echo -e "\a\033[31m[] 错误:拒绝使用系统目录!"
      exit 1
    fi
  done
  if [[ -e $CONTAINER_DIR ]];then
    echo -e "\a\033[31m[] 错误:目录已存在!"
    exit 1
  fi
  while :
  do
    read -p "[] 你想把容器放进镜像文件吗 [y/n]? " USE_IMAGE
    if [[ ${USE_IMAGE} = "n" || ${USE_IMAGE} = "y" ]];then
      break
    fi
  done
  if [[ ${USE_IMAGE} = "y" ]];then
    echo -e "[] 容器镜像绝对路径是用来存放容器镜像的目录，例如，你可以使用/data"|pv -qL 40
    while :
    do
      read -p "[] 请输入容器镜像绝对路径,不可包含空格: " CONTAINER_IMG_PATH
      if [[ $CONTAINER_IMG_PATH != "" ]];then
        break
      fi
    done
    if [[ $CONTAINER_IMG_PATH = $CONTAINER_DIR ]];then
      echo -e "\a\033[31m[] 错误:拒绝使用和容器相同的目录!"
      exit 1
    fi
    for BLACKLIST in {/bin/,/dev/,/odm/,/oem/,/proc/,/product/,/sys/,/system/,/vendor/};do
      if [[ $CONTAINER_IMG_PATH = $BLACKLIST* ]];then
        echo -e "\a\033[31m[] 错误:拒绝使用系统目录!"
        exit 1
      fi
    done
    while :
    do
      read -p "[] 请输入镜像文件名: " CONTAINER_IMG_NAME
      if [[ $CONTAINER_IMG_NAME != "" ]];then
        break
      fi
    done
    while :
    do
      read -p "[] 请输入镜像文件大小(单位为GB): " SIZE
      if [[ $SIZE != "" ]];then
        break
      fi
    done
  fi
  while :
  do
    read -p "[] 自动获取rootfs下载链接[y/n]? " AUTO_GET_LINK
    if [[ ${AUTO_GET_LINK} = "n" || ${AUTO_GET_LINK} = "y" ]];then
      break
    fi
  done
  if [[ ${AUTO_GET_LINK} = "n" ]];then
    echo -e "[] 你可以去 \033[4mhttp://mirrors.tuna.tsinghua.edu.cn/lxc-images/images\033[0m\e[38;5;159m 去获取rootfs下载链接或使用自定义rootfs"|pv -qL 40
    while :
    do
      read -p "[] 请输入rootfs下载链接或者自定义rootfs的绝对路径: " LINK
      if [[ $LINK != "" ]];then
        break
      fi
    done
  fi
  rm -rf $PREFIX/tmp/container >> /dev/null 2>&1
  mkdir -p $PREFIX/tmp/container >> /dev/null 2>&1
  cd $PREFIX/tmp/container
  if [[ ${AUTO_GET_LINK} = "y" ]];then
    DOWNLOAD_ROOTFS
  else
    [[ ${ENABLE_OUTPUT} = "false" ]]||clear
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 下载rootfs"|pv -qL 40
    wget ${LINK}||cp ${LINK} ./||exit 0
  fi
  if ! sudo mkdir -p ${CONTAINER_DIR};then
    echo -e "\a\033[31m[] 错误:无法创建容器目录!"
    rm -rf $PREFIX/tmp/container
    exit 1
  fi
  if [[ ${CONTAINER_IMG_NAME} != "" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 创建镜像文件"|pv -qL 40
    sudo mkdir -p ${CONTAINER_IMG_PATH}
    cd ${CONTAINER_IMG_PATH}
    sudo dd if=/dev/zero of=${CONTAINER_IMG_NAME}.img bs=1G count=${SIZE}
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 创建文件系统"|pv -qL 40
    sudo mkfs.ext4 ${CONTAINER_IMG_NAME}.img
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 挂载镜像文件"|pv -qL 40
    sleep 1s
    LOOPFILE=$(sudo losetup -f)
    sudo losetup  ${LOOPFILE} ${CONTAINER_IMG_NAME}.img  >> /dev/null 2>&1
    sudo mount ${LOOPFILE} ${CONTAINER_DIR}  >> /dev/null 2>&1
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 解压rootfs"|pv -qL 40
  sleep 2s
  ROOTFS=$(ls $PREFIX/tmp/container/)
  case $ROOTFS in
    *tar.gz|*tgz) tar -xzvf $PREFIX/tmp/container/$ROOTFS -C ${CONTAINER_DIR};;
    *tar.xz|*txz|*tar) tar -xvf $PREFIX/tmp/container/$ROOTFS -C ${CONTAINER_DIR};;
    *) echo -e "\a\033[31m[]错误:未知文件格式!";exit 1;;
  esac
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[] 写入配置文件"|pv -qL 40
  sleep 1s
  for i in {1..100};do
    if [[ ! -e $PREFIX/etc/container/container-${i}.conf ]];then
      CONTAINER=$i
      break
    fi
  done
  echo "#此文件为termux-container自动创建" >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo "#如果你不知道自己在做什么,不要编辑此文件!" >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo RUN_MODE=chroot-unshare >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo NAME=${NAME} >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo CONTAINER_DIR=${CONTAINER_DIR} >> $PREFIX/etc/container/container-${CONTAINER}.conf
  if [[ ${CONTAINER_IMG_NAME} != "" ]];then
    echo CONTAINER_IMG=${CONTAINER_IMG_PATH}/${CONTAINER_IMG_NAME}.img >> $PREFIX/etc/container/container-${CONTAINER}.conf
  else
    echo CONTAINER_IMG=null >> $PREFIX/etc/container/container-${CONTAINER}.conf
  fi
  export NEW_CONTAINER=${CONTAINER}
  LOAD_GLOBAL_CONFIG
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$NEW_CONTAINER/" $PREFIX/etc/container/global.conf
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 删除已下载的rootfs"|pv -qL 40
  sleep 1s
  rm -rf $PREFIX/tmp/container
  cd /data/data/com.termux/files/home
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 修复中..."|pv -qL 40
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 创建系统目录"|pv -qL 40
  [[ -e ${CONTAINER_DIR}/dev ]]||mkdir ${CONTAINER_DIR}/dev
  [[ -e ${CONTAINER_DIR}/proc ]]||mkdir ${CONTAINER_DIR}/proc
  [[ -e ${CONTAINER_DIR}/sys ]]||mkdir ${CONTAINER_DIR}/sys
  [[ -e ${CONTAINER_DIR}/sdcard ]]||mkdir ${CONTAINER_DIR}/sdcard
  if [[ $(cat ${CONTAINER_DIR}/etc/hosts|grep ${HOSTNAME}) = "" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 修复sudo"|pv -qL 40
    echo 127.0.0.1 ${HOSTNAME} >> ${CONTAINER_DIR}/etc/hosts
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 修复dns"|pv -qL 40
  rm -f ${CONTAINER_DIR}/etc/resolv.conf >> /dev/null 2>&1
  echo nameserver 8.8.8.8 >> ${CONTAINER_DIR}/etc/resolv.conf
  echo nameserver 114.114.114.114 >> ${CONTAINER_DIR}/etc/resolv.conf
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 添加用户组"|pv -qL 40
  cp $PREFIX/share/termux-container/group_add.sh ${CONTAINER_DIR}/tmp
  chmod 777 ${CONTAINER_DIR}/tmp/group_add.sh
  if [[ ${NEW_USER} != "" && ${PASSWORD} != "" ]];then
    sed -i "s/NEW_USER=\"\"/NEW_USER=${NEW_USER}/" ${CONTAINER_DIR}/tmp/group_add.sh
    sed -i "s/PASSWORD=\"\"/PASSWORD=${PASSWORD}/" ${CONTAINER_DIR}/tmp/group_add.sh
  fi
  mount -t proc proc  ${CONTAINER_DIR}/proc/
  mount --rbind /dev ${CONTAINER_DIR}/dev/
  mount --rbind /sys ${CONTAINER_DIR}/sys/
  unset LD_PRELOAD
  $PREFIX/bin/chroot ${CONTAINER_DIR} /tmp/group_add.sh >> /dev/null 2>&1
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 复制初始化脚本"|pv -qL 40
  mkdir -p ${CONTAINER_DIR}/usr/local/bin >> /dev/null 2>&1
  cp $PREFIX/share/termux-container/unshare_init ${CONTAINER_DIR}/usr/local/bin/
  chmod 777 ${CONTAINER_DIR}/usr/local/bin/unshare_init
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 设置主机名"|pv -qL 40
  echo ${HOSTNAME} > ${CONTAINER_DIR}/etc/hostname
  if [[ ${ENABLE_OUTPUT} = "y" ]];then
    touch ${CONTAINER_DIR}/etc/enable_output
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 解除容器挂载"|pv -qL 40
  umount -lvf ${CONTAINER_DIR}/dev >> /dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/sys >> /dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/proc >> /dev/null 2>&1
  umount -lvf ${CONTAINER_DIR} >> /dev/null 2>&1
  losetup -d ${CONTAINER_IMG} >> /dev/null 2>&1
  echo -e "[] 创建完毕!"
  return 0
  exit 0
}
CREATE_PROOT_CONTAINER(){
  while :
  do
    read -p "[] 请输入容器名,不可包含空格: " NAME
    if [[ $NAME != "" ]];then
      break
    fi
  done
  while :
  do
    read -p "[] 创建一个新的普通用户[y/n]? " CREATE_NEW_USER
    if [[ ${CREATE_NEW_USER} = "n" || ${CREATE_NEW_USER} = "y" ]];then
      break
    fi
  done
  if [[ ${CREATE_NEW_USER} = "y" ]];then
    while :
    do
      read -p "[] 请输入用户名: " NEW_USER
      if [[ ${NEW_USER} != "" ]];then
        break
      fi
    done
    while :
    do
      read -p "[] 请输入密码: " PASSWORD
      if [[ ${PASSWORD} != "" ]];then
        break
      fi
    done
  fi
  read -p "[] 请输入容器绝对路径(建议放置在/data/data/com.termux/files/home下的目录中): " CONTAINER_DIR
  if [[ -e $CONTAINER_DIR ]];then
    echo -e "[] 警告:目录已存在!"
  fi
  while :
  do
    read -p "[] 跨架构运行容器[y/n]? " CROSS
    if [[ ${CROSS} = "n" || ${CROSS} = "y" ]];then
      break
    fi
  done
  if [[ ${CROSS} = "y" ]];then
    echo -e "[1]aarch64 [2]arm     [3]i386    [4]m68k [5]ppc"
    echo -e "[6]ppc64   [7]riscv32 [8]riscv64 [9]x86-64"
    read -p "[]选择要模拟的架构:" ARCH
    case ${ARCH} in
      "1") apt install qemu-user-aarch64&&export CROSS_ARCH="aarch64";;
      "2") apt install qemu-user-arm&&export CROSS_ARCH="arm";;
      "3") apt install qemu-user-i386&&export CROSS_ARCH="i386";;
      "4") apt install qemu-user-m68k&&export CROSS_ARCH="m68k";;
      "5") apt install qemu-user-ppc&&export CROSS_ARCH="ppc";;
      "6") apt install qemu-user-ppc64&&export CROSS_ARCH="ppc64";;
      "7") apt install qemu-user-riscv32&&export CROSS_ARCH="riscv32";;
      "8") apt install qemu-user-riscv64&&export CROSS_ARCH="riscv64";;
      "9") apt install qemu-user-x86-64&&export CROSS_ARCH="x86_64";;
    esac
  else
    export CROSS_ARCH="null"
  fi
  while :
  do
    read -p "[] 自动获取rootfs下载链接[y/n]? " AUTO_GET_LINK
    if [[ ${AUTO_GET_LINK} = "n" || ${AUTO_GET_LINK} = "y" ]];then
      break
    fi
  done
  if [[ ${AUTO_GET_LINK} = "n" ]];then
    echo -e "[] 你可以去 \033[4mhttp://mirrors.tuna.tsinghua.edu.cn/lxc-images/images\033[0m\e[38;5;159m 来获取rootfs下载链接或使用自定义rootfs"|pv -qL 40
    while :
    do
      read -p "[] 输入rootfs下载链接或自定义rootfs绝对路径: " LINK
      if [[ $LINK != "" ]];then
        break
      fi
    done
  fi
  rm -rf $PREFIX/tmp/container
  mkdir -p $PREFIX/tmp/container
  cd $PREFIX/tmp/container
  if [[ ${AUTO_GET_LINK} = "y" ]];then
    DOWNLOAD_ROOTFS
  else
    axel -n16 ${LINK}||cp ${LINK} ./||exit 0
  fi
  if ! mkdir -p ${CONTAINER_DIR};then
    echo -e "\a\033[31m[] 错误:无法创建容器目录!"
    rm -rf $PREFIX/tmp/container
    exit 1
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 解压rootfs"|pv -qL 40
  sleep 1s
  ROOTFS=$(ls $PREFIX/tmp/container/)
  case $ROOTFS in
    *tar.gz|*tgz) tar -xzvf $PREFIX/tmp/container/$ROOTFS -C ${CONTAINER_DIR};;
    *tar.xz|*txz|*tar) tar -xvf $PREFIX/tmp/container/$ROOTFS -C ${CONTAINER_DIR};;
    *) echo "\a\033[31m[] 错误:未知文件格式";exit 1;;
  esac
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 删除已下载的rootfs"|pv -qL 40
  rm -rf $PREFIX/tmp/container/
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[] 写入配置文件"|pv -qL 40
  for i in {1..100};do
    if [[ ! -e $PREFIX/etc/container/container-${i}.conf ]];then
      CONTAINER=$i
      break
    fi
  done
  echo "#此文件为termux-container自动创建" >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo "#如果你不知道你在干什么,不要编辑此文件!" >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo RUN_MODE=proot >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo NAME=${NAME} >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo CONTAINER_DIR=${CONTAINER_DIR} >> $PREFIX/etc/container/container-${CONTAINER}.conf
  echo CROSS_ARCH=${CROSS_ARCH} >> $PREFIX/etc/container/container-${CONTAINER}.conf
  export NEW_CONTAINER=${CONTAINER}
  LOAD_GLOBAL_CONFIG
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$NEW_CONTAINER/" $PREFIX/etc/container/global.conf
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 修复中..."|pv -qL 40
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 修复dns"|pv -qL 40
  rm -f ${CONTAINER_DIR}/etc/resolv.conf
  echo nameserver 8.8.8.8 >> ${CONTAINER_DIR}/etc/resolv.conf
  echo nameserver 114.114.114.114 >> ${CONTAINER_DIR}/etc/resolv.conf
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "[] 添加用户组"|pv -qL 40
  cp $PREFIX/share/termux-container/group_add.sh ${CONTAINER_DIR}/tmp/
  chmod 777 ${CONTAINER_DIR}/tmp/group_add.sh
  if [[ ${NEW_USER} != "" && ${PASSWORD} != "" ]];then
    sed -i "s/NEW_USER=\"\"/NEW_USER=${NEW_USER}/" ${CONTAINER_DIR}/tmp/group_add.sh
    sed -i "s/PASSWORD=\"\"/PASSWORD=${PASSWORD}/" ${CONTAINER_DIR}/tmp/group_add.sh
  fi
  unset LD_PRELOAD
  COMMAND="proot --link2symlink --sysvipc -0 -r ${CONTAINER_DIR} -b /dev -b /sys -b /proc -w /root"
  if [[ ${CROSS_ARCH} != "null" ]];then
    COMMAND+=" -q qemu-${CROSS_ARCH}"
  fi
  exec ${COMMAND} /tmp/group_add.sh >> /dev/null 2&>1
  echo -e "[] 创建完毕!"
}
CREATE_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_CREATE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  echo -e "如果你的设备已root,建议使用chroot-unshare容器;如果你的设备未root或者你想运行跨架构容器，请选择proot."
  echo -e "[1] chroot-unshare   [2] proot"
  while :
  do
    read -p "请选择容器运行模式: " RUN_MODE
    if [[ ${RUN_MODE} = "1" || ${RUN_MODE} = "2" ]];then
      break
    fi
  done
  if [[ ${RUN_MODE} = "1" ]];then
    sudo container -e CREATE_CHROOT_CONTAINER
  else
    CREATE_PROOT_CONTAINER
  fi
}
BACKUP_CHROOT_CONTAINER(){
  pkill unshare
  source $PREFIX/etc/container/container-$1.conf
  umount -lvf ${CONTAINER_DIR}/dev >> /dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/sys >> /dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/proc >> /dev/null 2>&1
  umount ${CONTAINER_DIR}/sdcard >> /dev/null 2>&1
  umount -lvf ${CONTAINER_DIR} >> /dev/null 2>&1
  losetup -d ${CONTAINER_IMG} >> /dev/null 2>&1
  echo -e "[] 选择备份文件压缩格式:"
  while :
  do
    read -p "[1]tar.gz [2]tar.xz [3]tar " FORMAT
    if [[ $FORMAT = "1" || $FORMAT = "2" || $FORMAT = "3" ]];then
      break
    fi
  done
  cd ${CONTAINER_DIR}
  rm -rf $PREFIX/tmp/container
  mkdir -p $PREFIX/tmp/container
  case ${FORMAT} in
    1) tar -zcvPf $PREFIX/tmp/container/rootfs.tar.gz .;;
    2) tar -JcvPf $PREFIX/tmp/container/rootfs.tar.xz .;;
    3) tar -cvPf  $PREFIX/tmp/container/rootfs.tar .;;
  esac
  cp $PREFIX/etc/container/container-$1.conf $PREFIX/tmp/container/container.conf
  cd $PREFIX/tmp/container
  TARGET="/sdcard/container-$NAME-$(date +%y%m%d%H%M%S).bk"
  tar -cvf ${TARGET} .
  rm -rf $PREFIX/tmp/container
  echo -e "[] 备份完成,备份文件: ${TARGET}"
}
BACKUP_PROOT_CONTAINER(){
  pkill proot
  source $PREFIX/etc/container/container-$1.conf
  echo -e "[] 选择备份文件压缩格式:"
  while :
  do
    read -p "[1]tar.gz [2]tar.xz [3]tar " FORMAT
    if [[ $FORMAT = "1" || $FORMAT = "2" || $FORMAT = "3" ]];then
      break
    fi
  done
  cd ${CONTAINER_DIR}
  rm -rf $PREFIX/tmp/container
  mkdir -p $PREFIX/tmp/container
  case ${FORMAT} in
    1) tar -zcvPf $PREFIX/tmp/container/rootfs.tar.gz .;;
    2) tar -JcvPf $PREFIX/tmp/container/rootfs.tar.xz .;;
    3) tar -cvPf  $PREFIX/tmp/container/rootfs.tar .;;
  esac
  cp $PREFIX/etc/container/container-$1.conf $PREFIX/tmp/container/container.conf
  cd $PREFIX/tmp/container
  TARGET="/sdcard/container-$NAME-$(date +%y%m%d%H%M%S).bk"
  tar -cvf ${TARGET} .
  rm -rf $PREFIX/tmp/container
  echo -e "[] 备份完成,备份文件: ${TARGET}"
}
BACKUP_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_BACKUP$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  cd $PREFIX/etc/container
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      source container-${i}.conf
      echo -e "[${i}] ${NAME} (${RUN_MODE})"
      sleep 0.3s
    fi
  done
  while :
  do
    read -p "[] 选择要备份的文件: " CONTAINER
    if [[ -e $PREFIX/etc/container/container-${CONTAINER}.conf ]];then
      break
    fi
  done
  source $PREFIX/etc/container/container-${CONTAINER}.conf
  if [[ ${RUN_MODE} = "chroot-unshare" ]];then
    sudo container -e BACKUP_CHROOT_CONTAINER ${CONTAINER}
  else
    BACKUP_PROOT_CONTAINER ${CONTAINER}
  fi
}
RESTORE_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-17))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_RESTORE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 1s
  rm -rf $PREFIX/tmp/container
  mkdir -p $PREFIX/tmp/container
  tar -xvf $1 -C $PREFIX/tmp/container
  source $PREFIX/tmp/container/container.conf
  if [[ ${RUN_MODE} = "chroot-unshare" ]];then
    sudo mkdir -p ${CONTAINER_DIR}
    ROOTFS=$(ls $PREFIX/tmp/container/rootfs*)
    case ${ROOTFS} in
      *tar) sudo tar -xvPf ${ROOTFS} -C ${CONTAINER_DIR};;
      *tar.gz) sudo tar -xzvPf ${ROOTFS} -C ${CONTAINER_DIR};;
      *tar.xz) sudo tar -xvPf ${ROOTFS} -C ${CONTAINER_DIR};;
    esac
  else
    mkdir -p ${CONTAINER_DIR}
    ROOTFS=$(ls $PREFIX/tmp/container/rootfs*)
    case ${ROOTFS} in
      *tar) tar -xvPf ${ROOTFS} -C ${CONTAINER_DIR};;
      *tar.gz) tar -xzvPf ${ROOTFS} -C ${CONTAINER_DIR};;
      *tar.xz) tar -xvPf ${ROOTFS} -C ${CONTAINER_DIR};;
    esac
  fi
  for i in {1..100};do
    if [[ ! -e $PREFIX/etc/container/container-$i.conf ]];then
      mv $PREFIX/tmp/container/container.conf $PREFIX/etc/container/container-$i.conf
      sed -i "s/CONTAINER=$CONTAINER/CONTAINER=$i/" $PREFIX/etc/container/global.conf
      break
    fi
  done
  rm -rf $PREFIX/tmp/container
}
SWITCH_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_SWITCH$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  cd $PREFIX/etc/container
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      source container-${i}.conf
      echo -e "\e[38;5;159m[$i] ${NAME} (${RUN_MODE})"
    fi
  done
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  while :
  do
    read -p "[] 选择要运行的容器: " CONTAINER
    if [[ -e $PREFIX/etc/container/container-${CONTAINER}.conf ]];then
      source $PREFIX/etc/termux-container/container-${CONTAINER_BK}.conf >> /dev/null 2>&1
      if [[ ${RUN_MODE} = "chroot-unshare" ]];then
        sudo umount -lvf ${CONTAINER_DIR}/dev >> /dev/null 2>&1
        sudo umount -lvf ${CONTAINER_DIR}/sys >> /dev/null 2>&1
        sudo umount -lvf ${CONTAINER_DIR}/proc >> /dev/null 2>&1
        sudo umount ${CONTAINER_DIR}/sdcard >> /dev/null 2>&1
        sudo umount -lvf ${CONTAINER_DIR} >> /dev/null 2>&1
        sudo losetup -d ${CONTAINER_IMG} >> /dev/null 2>&1
      fi
      break
    fi
  done
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" $PREFIX/etc/container/global.conf
  return 0
  exit 0
}
MOUNT_IMAGE_FILE(){
  if [[ $(whoami) != "root" ]];then
    sudo container -e MOUNT_IMAGE_FILE
    exit 0
  fi
  LOAD_GLOBAL_CONFIG
  LOAD_CONTAINER_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-15))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_MOUNT$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  if [[ ${CONTAINER_IMG} = "" ]];then
    echo -e "\a\033[31m[] 错误:未使用镜像文件!\033[0m"
    exit 1
  fi
  if [[ ! -e ${CONTAINER_IMG} ]];then
    echo -e "\a\033[31m[] 错误:镜像文件不存在!\033[0m"
    exit 1
  fi
  LOOPFILE=$(sudo losetup -f)
  sudo losetup ${LOOPFILE} ${CONTAINER_IMG}
  sudo mount ${LOOPFILE} ${CONTAINER_DIR}
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[] ${CONTAINER_IMG} 已被挂载到 ${CONTAINER_DIR} \033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[] 完毕!\033[0m"
  return 0
  exit 0
}
RUN_CHROOT_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  LOAD_CONTAINER_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||printf '\e[38;5;159m\033[?25l'
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-13))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_RUN$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m    _________      [\e[38;5;153m\e[38;5;159m] 容器名: \e[38;5;153m${NAME}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   /        /\\     [\e[38;5;153m\e[38;5;159m] CPU架构: \e[38;5;153m$(uname -m)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  if [[ $DISABLE_SELINUX = "true" ]];then
    SELINUX=Permissive
  else
    SELINUX=Enforcing
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m  /        /  \\    [\e[38;5;153m\e[38;5;159m] SELinux状态: \e[38;5;153m${SELINUX}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m /        /    \\   [\e[38;5;153m\e[38;5;159m] 内核版本: \e[38;5;153m$(uname -r)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m/________/      \\  [\e[38;5;153m\e[38;5;159m] 当前时间: \e[38;5;153m$(date|awk '{print $4}')"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m\\        \\      /  [\e[38;5;153m\e[38;5;159m] 主机名: \e[38;5;153m$(hostname)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m \\        \\    /   [\e[38;5;153m\e[38;5;159m] 安卓版本: \e[38;5;153m$(getprop ro.build.version.release)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m  \\        \\  /    [\e[38;5;153m\e[38;5;159m] 容器目录: \e[38;5;153m${CONTAINER_DIR}"
  if [[ $CONTAINER_IMG != "" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] 容器镜像: \e[38;5;153m${CONTAINER_IMG}"
  else
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] 容器镜像: \e[38;5;153mnull"
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m〉\e[38;5;153mTERMUX-CONTAINER"
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m$(yes "─"|sed $i1'q'|tr -d '\n')"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//////"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  if [[ ! -e ${CONTAINER_DIR} ]];then
    echo -e "\033[31m\a[] 错误:容器目录不存在!"&&printf "\033[?25h"
    exit 1
  fi
  if [[ ${CONTAINER_IMG} != "" && ${CONTAINER_IMG} != "null" ]] && [[ ! -e ${CONTAINER_IMG} ]];then
    echo -e "\a\033[31m[] 错误:镜像文件不存在!"&&printf "\033[?25h"
    exit 1
  fi
  if [[ ${DISABLE_SELINUX} = "true" ]];then
    if [[ $(getenforce) != "Permissive" ]];then
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 关闭selinux"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      setenforce 0 >> /dev/null 2>&1
    fi
  fi
  if [[ $(mount|grep ${CONTAINER_DIR}) =  "" ]];then
    if [[ ${CONTAINER_IMG} = "" || ${CONTAINER_IMG} = "null" ]];then
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 重挂载 /data"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      mount -o remount,suid /data  >> /dev/null 2>&1
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 ${CONTAINER_DIR}"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      mount --rbind ${CONTAINER_DIR} ${CONTAINER_DIR} >> /dev/null 2>&1
    else
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 运行 fsck"
      fsck.ext4 -a -f  ${CONTAINER_IMG} >> /dev/null 2>&1
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 ${CONTAINER_IMG}"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      LOOPFILE=$(losetup -f)
      losetup  ${LOOPFILE} ${CONTAINER_IMG}  >> /dev/null 2>&1
      mount  ${LOOPFILE} ${CONTAINER_DIR}  >> /dev/null 2>&1
    fi
  fi
  if [[ $(mount|grep ${CONTAINER_DIR}|grep /sdcard) =  "" && ${MOUNT_SDCARD} = "true" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /sdacrd"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount -o ro,bind /sdcard ${CONTAINER_DIR}/sdcard/ >> /dev/null 2>&1
  fi
  case $CURSOR in
    block)     printf '\e[2 q';;
    bar)       printf '\e[6 q';;
    underline) printf '\e[4 q';;
  esac
  if [[ ! -e ${CONTAINER_DIR}/usr/local/bin/unshare_init ]];then
    mkdir -p ${CONTAINER_DIR}/usr/local/bin/ >> /dev/null 2>&1
    cp $PREFIX/share/termux-container/unshare_init ${CONTAINER_DIR}/usr/local/bin/
    chmod 777 ${CONTAINER_DIR}/usr/local/bin/unshare_init
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||touch ${CONTAINER_DIR}/etc/enable_output
  [[ ${ENABLE_OUTPUT} = "true" ]]||rm ${CONTAINER_DIR}/etc/enable_output >> /dev/null 2>&1
  echo ${HOSTNAME} > ${CONTAINER_DIR}/etc/hostname
  UNSHARE_PARAMETER="--fork"
  if [[ -e  /proc/$$/ns/ipc ]];then
    UNSHARE_PARAMETER+=" -i"
  fi
  if [[ -e /proc/$$/ns/mnt ]];then
    UNSHARE_PARAMETER+=" -m"
  fi
  if [[ -e /proc/$$/ns/pid ]];then
    UNSHARE_PARAMETER+=" -p"
  fi
  if [[ -e /proc/$$/ns/uts ]];then
    UNSHARE_PARAMETER+=" -u"
  fi
  printf "\033[?25h\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 运行 unshare"
  unset LD_PRELOAD
  /bin/unshare ${UNSHARE_PARAMETER} $PREFIX/bin/chroot ${CONTAINER_DIR} /usr/local/bin/unshare_init
  printf '\e[2 q\033[0m'
  return 0
  exit 0
}
LEGACY_MODE(){
  LOAD_GLOBAL_CONFIG
  LOAD_CONTAINER_CONFIG
  if [[ ${RUN_MODE} = "proot" ]];then
    echo -e "\a\033[31m[] 错误:传统模式仅供chroot容器使用!"
    exit 1
  fi
  sudo container -e RUN_CHROOT_CONTAINER_LEGACY_MODE
  return 0
  exit 0
}
RUN_CHROOT_CONTAINER_LEGACY_MODE(){
  LOAD_GLOBAL_CONFIG
  LOAD_CONTAINER_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||printf '\e[38;5;159m\033[?25l'
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-13))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_RUN$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m    _________      [\e[38;5;153m\e[38;5;159m] 容器名: \e[38;5;153m${NAME}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   /        /\\     [\e[38;5;153m\e[38;5;159m] CPU架构: \e[38;5;153m$(uname -m)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  if [[ $DISABLE_SELINUX = "true" ]];then
    SELINUX=Permissive
  else
    SELINUX=Enforcing
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m  /        /  \\    [\e[38;5;153m\e[38;5;159m] SELinux状态: \e[38;5;153m${SELINUX}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m /        /    \\   [\e[38;5;153m\e[38;5;159m] 内核版本: \e[38;5;153m$(uname -r)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m/________/      \\  [\e[38;5;153m\e[38;5;159m] 当前时间: \e[38;5;153m$(date|awk '{print $4}')"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m\\        \\      /  [\e[38;5;153m\e[38;5;159m] 主机名: \e[38;5;153m$(hostname)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m \\        \\    /   [\e[38;5;153m\e[38;5;159m] 安卓版本: \e[38;5;153m$(getprop ro.build.version.release)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m  \\        \\  /    [\e[38;5;153m\e[38;5;159m] 容器目录: \e[38;5;153m${CONTAINER_DIR}"
  if [[ $CONTAINER_IMG != "" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] 容器镜像: \e[38;5;153m${CONTAINER_IMG}"
  else
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] 容器镜像: \e[38;5;153mnull"
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m〉\e[38;5;153mTERMUX-CONTAINER"
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m$(yes "─"|sed $i1'q'|tr -d '\n')"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//////"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  if [[ ! -e ${CONTAINER_DIR} ]];then
    echo -e "\033[31m\a[] 错误:容器目录不存在!"&&printf "\033[?25h"
    exit 1
  fi
  if [[ ${CONTAINER_IMG} != "" && ${CONTAINER_IMG} != "null" ]] && [[ ! -e ${CONTAINER_IMG} ]];then
    echo -e "\a\033[31m[] 错误:镜像文件不存在!"&&printf "\033[?25h"
    exit 1
  fi
  if [[ ${DISABLE_SELINUX} = "true" ]];then
    if [[ $(getenforce) != "Permissive" ]];then
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 关闭selinux"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      setenforce 0 >> /dev/null 2>&1
    fi
  fi
  if [[ $(mount|grep ${CONTAINER_DIR}) =  "" ]];then
    if [[ ${CONTAINER_IMG} = "" || ${CONTAINER_IMG} = "null" ]];then
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 重挂载 /data"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      mount -o remount,suid /data  >> /dev/null 2>&1
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 ${CONTAINER_DIR}"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      mount --rbind ${CONTAINER_DIR} ${CONTAINER_DIR} >> /dev/null 2>&1
    else
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 运行 fsck"
      fsck.ext4 -a -f  ${CONTAINER_IMG} >> /dev/null 2>&1
      [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 ${CONTAINER_IMG}"
      [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
      LOOPFILE=$(losetup -f)
      losetup  ${LOOPFILE} ${CONTAINER_IMG}  >> /dev/null 2>&1
      mount  ${LOOPFILE} ${CONTAINER_DIR}  >> /dev/null 2>&1
    fi
  fi
  if [[ $(mount|grep ${CONTAINER_DIR}|grep /sdcard) =  "" && ${MOUNT_SDCARD} = "true" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /sdacrd"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount -o ro,bind /sdcard ${CONTAINER_DIR}/sdcard/ >> /dev/null 2>&1
  fi
  if [[ ! -e /dev/fd ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/fd"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    ln -s /proc/self/fd /dev/ >> /dev/null 2>&1
  fi
  if [[ ! -e /dev/stdin ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/stdin"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    ln -s /proc/self/fd/0 /dev/stdin >> /dev/null 2>&1
  fi
  if [[ ! -e /dev/stdout ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/stdout"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    ln -s /proc/self/fd/1 /dev/stdout >> /dev/null 2>&1
  fi
  if [[ ! -e /dev/stderr ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/stderr"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    ln -s /proc/self/fd/2 /dev/stderr >> /dev/null 2>&1
  fi
  if [[ ! -e /dev/tty0 ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/tty0"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    ln -s /dev/null /dev/tty0 >> /dev/null 2>&1
  fi
  if [[ ! -e "/dev/net/tun" ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/net/tun"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    [[ -d /dev/net ]] || mkdir -p /dev/net >> /dev/null 2>&1
    mknod /dev/net/tun c 10 200 >> /dev/null 2>&1
  fi
  if [[ ! -e /dev/shm ]];then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 创建 /dev/shm"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mkdir -p /dev/shm >> /dev/null 2>&1
    mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs /dev/shm >> /dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/proc;then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /proc"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount --bind /proc ${CONTAINER_DIR}/proc >> /dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/sys;then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /sys"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount --bind /sys ${CONTAINER_DIR}/sys >> /dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/dev;then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /dev"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount --bind /dev ${CONTAINER_DIR}/dev >> /dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/dev/shm;then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /dev/shm"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount -o bind /dev/shm ${CONTAINER_DIR}/dev/shm >> /dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/dev/pts;then
    [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 挂载 /dev/pts"
    [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
    mount -o bind /dev/pts ${CONTAINER_DIR}/dev/pts >> /dev/null 2>&1
  fi
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] 运行容器"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  case ${CURSOR} in
    block)     printf '\e[2 q';;
    bar)       printf '\e[6 q';;
    underline) printf '\e[4 q';;
  esac
  printf "\033[?25h\033[0m"
  unset LD_PRELOAD
  chroot ${CONTAINER_DIR} /bin/su - root
}
RUN_PROOT_CONTAINER(){
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||printf '\e[38;5;159m\033[?25l'
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-13))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_RUN$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m    _________      [\e[38;5;153m\e[38;5;159m] 容器名: \e[38;5;153m${NAME}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   /        /\\     [\e[38;5;153m\e[38;5;159m] CPU架构: \e[38;5;153m$(uname -m)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m  /        /  \\    [\e[38;5;153m\e[38;5;159m] 跨架构: \e[38;5;153m${CROSS_ARCH}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m /        /    \\   [\e[38;5;153m\e[38;5;159m] 内核版本: \e[38;5;153m$(uname -r)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m/________/      \\  [\e[38;5;153m\e[38;5;159m] 当前时间: \e[38;5;153m$(date|awk '{print $4}')"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m\\        \\      /  [\e[38;5;153m\e[38;5;159m] 主机名: \e[38;5;153m$(hostname)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m \\        \\    /   [\e[38;5;153m\e[38;5;159m] 安卓版本: \e[38;5;153m$(getprop ro.build.version.release)"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m  \\        \\  /    [\e[38;5;153m\e[38;5;159m] 容器目录: \e[38;5;153m${CONTAINER_DIR}"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] 当前版本: \e[38;5;153m7.0"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m〉\e[38;5;153mTERMUX-CONTAINER"
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m$(yes "─"|sed $i1'q'|tr -d '\n')"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "//////"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  unset LD_PRELOAD
  COMMAND="proot"
  COMMAND+=" --link2symlink"
  COMMAND+=" --kill-on-exit"
  COMMAND+=" --sysvipc"
  COMMAND+=" -0"
  COMMAND+=" -r ${CONTAINER_DIR}"
  COMMAND+=" -b /dev"
  COMMAND+=" -b /sys"
  COMMAND+=" -b /proc"
  COMMAND+=" -w /root"
  if [[ ${MOUNT_SDCARD} = "true" ]];then
    COMMAND+=" -b /sdcard"
  fi
  if [[ ${CROSS_ARCH} != "null" ]];then
    COMMAND+=" -q qemu-${CROSS_ARCH}"
  fi
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/buddyinfo:/proc/buddyinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/cgroups:/proc/cgroups"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/consoles:/proc/consoles"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/crypto:/proc/crypto"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/devices:/proc/devices"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/diskstats:/proc/diskstats"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/execdomains:/proc/execdomains"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/fb:/proc/fb"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/filesystems:/proc/filesystems"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/interrupts:/proc/interrupts"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/iomem:/proc/iomem"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/ioports:/proc/ioports"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/kallsyms:/proc/kallsyms"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/key-users:/proc/key-users"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/keys:/proc/keys"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/kpageflags:/proc/kpageflags"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/loadavg:/proc/loadavg"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/locks:/proc/locks"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/misc:/proc/misc"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/modules:/proc/modules"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/pagetypeinfo:/proc/pagetypeinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/partitions:/proc/partitions"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/sched_debug:/proc/sched_debug"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/softirqs:/proc/softirqs"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/timer_list:/proc/timer_list"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/uptime:/proc/uptime"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/version:/proc/version"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/vmallocinfo:/proc/vmallocinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/vmstat:/proc/vmstat"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/zoneinfo:/proc/zoneinfo"
  COMMAND+=" /bin/su - root"
  case ${CURSOR} in
    block)     printf '\e[2 q';;
    bar)       printf '\e[6 q';;
    underline) printf '\e[4 q';;
  esac
  printf "\033[?25h\033[0m"
  exec ${COMMAND}
  printf '\e[2 q'
  return 0
  exit 0
}
RUN_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  LOAD_CONTAINER_CONFIG
  if [[ ${RUN_MODE} = "chroot-unshare" ]];then
    sudo container -e RUN_CHROOT_CONTAINER
  else
    RUN_PROOT_CONTAINER
  fi
}
REMOVE_CONTAINER(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_REMOVE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  cd $PREFIX/etc/container
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      source container-${i}.conf
      echo -e "[$i] $NAME (${RUN_MODE})"
    fi
  done
  while :
  do
    read -p "[] 选择要删除的容器: " CONTAINER
    if [[ -e $PREFIX/etc/container/container-${CONTAINER}.conf ]];then
      break
     fi
  done
  echo -e "\a[] 容器中所有文件将被删除"|pv -qL 40
  read -p "[] 按回车键继续或按ctrl-c退出" NULL
  source $PREFIX/etc/container/container-${CONTAINER}.conf
  if [[ ${RUN_MODE} = "proot" ]];then
    if [[ ${CONTAINER_DIR} != "" ]];then
      rm -rvf ${CONTAINER_DIR}
    fi
    rm -v $PREFIX/etc/container/container-${CONTAINER}.conf
  else
    if [[ ${CONTAINER_DIR} != "" ]];then
      sudo umount -lvf ${CONTAINER_DIR}/dev >> /dev/null 2>&1
      sudo umount -lvf ${CONTAINER_DIR}/sys >> /dev/null 2>&1
      sudo umount -lvf ${CONTAINER_DIR}/proc >> /dev/null 2>&1
      sudo umount ${CONTAINER_DIR}/sdcard >> /dev/null 2>&1
      sudo umount -lvf ${CONTAINER_DIR} >> /dev/null 2>&1
      sudo losetup -d ${CONTAINER_IMG} >> /dev/null 2>&1
      sudo rm -rvf ${CONTAINER_DIR}
    fi
    if [[ ${CONTAINER_IMG} != "" && ${CONTAINER_IMG} != "null" ]];then
      sudo rm -v ${CONTAINER_IMG}
    fi
    sudo rm -v $PREFIX/etc/container/container-${CONTAINER}.conf
  fi
}
REMOVE_ALL_CONTAINERS(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-19))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_UNINSTALL$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  cd $PREFIX/etc/container
  for i in {1..100};do
      if [[ -e container-${i}.conf ]];then
        source $PREFIX/etc/container/container-${i}.conf
        read -p "[] 删除容器 ${NAME}[y/n]? " REMOVE
        if [[ $REMOVE = "n" ]];then
          continue
        fi
        sleep 1s
        if [[ ${RUN_MODE} = "proot" ]];then
          if [[ ${CONTAINER_DIR} != "" ]];then
            rm -rvf ${CONTAINER_DIR}
            rm -v $PREFIX/etc/container/container-${i}.conf
          fi
        else
          if [[ ! ${CONTAINER_DIR} = "" ]];then
            sudo umount -lvf ${CONTAINER_DIR}/dev >> /dev/null 2>&1
            sudo umount -lvf ${CONTAINER_DIR}/sys >> /dev/null 2>&1
            sudo umount -lvf ${CONTAINER_DIR}/proc >> /dev/null 2>&1
            sudo umount ${CONTAINER_DIR}/sdcard >> /dev/null 2>&1
            sudo umount -lvf ${CONTAINER_DIR} >> /dev/null 2>&1
            sudo losetup -d ${CONTAINER_IMG} >> /dev/null 2>&1
            if [[ ${CONTAINER_DIR} != "" ]];then
              sudo rm -rfv ${CONTAINER_DIR}
            fi
            if [[ ${CONTAINER_IMG} != "" ]];then
              sudo rm -rfv ${CONTAINER_IMG}
            fi
            sudo rm -v $PREFIX/etc/container/container-${i}.conf
          fi
        fi
        unset REMOVE
      fi
  done
  apt purge termux-container
  echo -e "\e[38;5;159m[] 卸载完成!"
  return 0
  exit 0
}
SETTINGS(){
  LOAD_GLOBAL_CONFIG
  [[ ${ENABLE_OUTPUT} = "false" ]]||clear
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "false" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "false" ]]||i1=$(($i1-18))
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[30;48;5;159mCONTAINER_SETTINGS$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "false" ]]||echo -e ""
  echo -e "------SETTINGS------"
  echo -e "[] 启用输出:${ENABLE_OUTPUT}"
  echo -e "[] 挂载/sdcard:${MOUNT_SDCARD}"
  echo -e "[] 主机名:${HOSTNAME}"
  echo -e "[] 光标:${CURSOR}"
  echo -e "[] 禁用selinux:${DISABLE_SELINUX}"
  echo -e "[] 容器编号:${CONTAINER}"
  read -p "按回车键编辑文件或按ctrl-c取消" NULL
  nano $PREFIX/etc/container/global.conf
  return 0
  exit 0
}
SHOW_HELPS(){
  echo -e "              \e[38;5;157m┌───────────┐"
  echo -e "              │ ┌───────┐ │"
  echo -e "              │ │  \e[38;5;227m┌───────────┐"
  echo -e "              \e[38;5;157m│ │  \e[38;5;227m│ ┌───────┐ │"
  echo -e "              \e[38;5;157m│ │  \e[38;5;227m│ │  \e[38;5;157m│ │  \e[38;5;227m│ │"
  echo -e "              \e[38;5;157m│ └──\e[38;5;227m│ │\e[38;5;157m──┘ │  \e[38;5;227m│ │"
  echo -e "              \e[38;5;157m└────\e[38;5;227m│ │\e[38;5;157m────┘  \e[38;5;227m│ │"
  echo -e "                   \e[38;5;227m│ └───────┘ │"
  echo -e "                   \e[38;5;227m└───────────┘"
  echo -e "\e[38;5;153m═╔╝╔═╝╔═║╔╔ ║ ║║ ║  ╔═╝╔═║╔═ ═╔╝╔═║╝╔═ ╔═╝╔═║"
  echo -e " ║ ╔═╝╔╔╝║║║║ ║ ╝ ═╝║  ║ ║║ ║ ║ ╔═║║║ ║╔═╝╔╔╝"
  echo -e " ╝ ══╝╝ ╝╝╝╝══╝╝ ╝  ══╝══╝╝ ╝ ╝ ╝ ╝╝╝ ╝══╝╝ ╝"
  echo -e "\e[38;5;159m          「此脚本没有超级牛力!」"
  echo -e "Usage:"
  echo -e " container                   #打开菜单"
  echo -e " container -run              #运行容器"
  echo -e " container -l                #运行容器(传统模式) *仅供chroot容器"
  echo -e " container -c                #创建一个新容器"
  echo -e " container -S                #切换容器"
  echo -e " container -s                #设置"
  echo -e " container -r                #删除一个容器"
  echo -e " container -m                #挂载镜像文件 *仅供chroot容器"
  echo -e " container -bk               #备份容器"
  echo -e " container -R [备份文件]     #还原容器"
  echo -e " container -e [函数名]       #执行内置函数 *仅供调试"
  echo -e " container -v                #版本信息"
  echo -e " container -U                #批量删除容器&卸载此脚本"
  echo -e " container -h                #显示此页面\033[0m"
  return 0
  exit 0
}
DISPLAY_VERSION(){
  printf '\e[38;5;159m'
  echo -e "[] (>_×)"
  echo -e "[] 项目: termux-container"
  echo -e "[] 作者: Moe-hacker"
  echo -e "[] 许可证: APACHE-2.0"
  echo -e "[] 此脚本*无担保*"
  echo -e '[] 版本: 7.0\033[0m'
  return 0
  exit 0
}
MENU(){
  printf '\e[38;5;159m'
  WIDTH=$(($(stty size|awk '{print $2}')-4))
  OPTION=$(whiptail --title "termux-container" --menu "选择你的操作" 16 $WIDTH 9 \
  "1" "运行容器" \
  "2" "运行容器(传统模式)" \
  "3" "创建容器" \
  "4" "切换容器"  \
  "5" "备份容器" \
  "6" "还原容器" \
  "7" "删除容器" \
  "8" "设置" \
  "9" "版本信息" \
  "10" "批量删除容器&卸载此脚本" \
  "11" "帮助信息" \
  "12" "退出" 3>&1 1>&2 2>&3)
  case $OPTION in
    "1") container -run;;
    "2") container -l;;
    "3") container -c;;
    "4") container -S;;
    "5") container -bk;;
    "6") read -p "备份文件:" BKFILE&&container -R $BKFILE;;
    "7") container -r;;
    "8") container -s;;
    "9") container -v;;
    "10") container -U;;
    "11") container -h;;
    "12") exit;;
  esac
  return 0
  exit 0
}
EXEC_FUNCTION(){
  $1 $2
}
case $1 in
  *run)    RUN_CONTAINER;;
  *l)      LEGACY_MODE;;
  *h)      SHOW_HELPS;;
  *s)      SETTINGS;;
  *c)      CREATE_CONTAINER;;
  *m)      MOUNT_IMAGE_FILE;;
  *r)      REMOVE_CONTAINER;;
  *R)      RESTORE_CONTAINER $2;;
  *bk)     BACKUP_CONTAINER;;
  *S)      SWITCH_CONTAINER;;
  *v)      DISPLAY_VERSION;;
  *U)      REMOVE_ALL_CONTAINERS;;
  *e)      EXEC_FUNCTION $2 $3;;
  "")      MENU;;
   *)      SHOW_HELPS;;
esac
#copyright 2022 Moe-hacker (Author)
# ██╗ ██╗  ███████╗   ████╗   ███████╗
#████████╗ ██╔════╝ ██╔═══██╗ ██╔════╝
#╚██╔═██╔╝ █████╗   ██║   ██║ █████╗
#████████╗ ██╔══╝   ██║   ██║ ██╔══╝
#╚██╔═██╔╝ ███████╗ ╚██████╔╝ ██║
# ╚═╝ ╚═╝  ╚══════╝  ╚═════╝  ╚═╝
