#!/data/data/com.termux/files/usr/bin/bash
# ██╗ ██╗  ██╗ ██████╗  █████╗   ███████╗ ██╗  ██╗
#████████╗ ██║ ██╔══██╗ ██╔══██╗ ██╔════╝ ██║  ██║
#╚██╔═██╔╝ ██║ ██████╔╝ ███████║ ███████╗ ███████║
#████████╗ ╚═╝ ██╔══██╗ ██╔══██║ ╚════██║ ██╔══██║
#╚██╔═██╔╝ ██╗ ██████╔╝ ██║  ██║ ███████║ ██║  ██║
# ╚═╝ ╚═╝  ╚═╝ ╚═════╝  ╚═╝  ╚═╝ ╚══════╝ ╚═╝  ╚═╝
###### Github@Moe-hacker ######
#❀我萌故我在❀
#•.,¸,.•*¯`•.,¸,.•....╭━━━━━━━━━╮
#`•.,¸,.•*¯`•.,¸,.•*¯.|::::::::::/\__/\
#`•.,¸,.•*¯`•.,¸,.•* <|:::::::::(｡ ●ω●｡)
#`•.,¸,.•*¯`•.,¸,.•*  ╰し--し--Ｊ･ﾟ
#编程第一法则:如果你的代码不知道为啥能跑起来，就别再动它了
#编程第二法则:多个人拉的屎放一起会炸
#编程第三法则:老代码不要乱动，因为你可能也不知道你写的什么
#编程第四法则:如果一个功能太难实现，那就放弃
###### E-mail: moe-hacker@outlook.com ######
######  Blog: cnblogs.com/Moe-hacker  ######
####################
######日志管理######
####################
export RUN_WITH=$@
export LOG_FILE="$PREFIX/var/log/proot-container.log"
CONTAINER_LOG_HEAD(){
  echo "------------------LOG START----------------------" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] RUN WITH \"$RUN_WITH\"" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] ARCH: $(uname -m)" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] KERNEL: $(uname -r)" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] ANDROID: $(getprop ro.build.version.release)" >> ${LOG_FILE}
  if [[ -e $PREFIX/etc/proot-container/global.conf ]];then
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] GLOBAL CONFIG:" >> ${LOG_FILE}
    export $(cat $PREFIX/etc/proot-container/global.conf)
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] MOUNT_SDCARD=${MOUNT_SDCARD}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] ENABLE_OUTPUT=${ENABLE_OUTPUT}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] CURSOR=${CURSOR}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] CONTAINER=${CONTAINER}" >> ${LOG_FILE}
  fi
}
CONTAINER_LOG(){
  echo -e "[$(date +%Y-%m-%d\ %H:%M:%S)] $@" >> ${LOG_FILE}
}
CONTAINER_LOG_END(){
  echo "-------------------LOG END-----------------------" >> ${LOG_FILE}
}
####################
######安装程序######
####################
if [[ ! -e $PREFIX/bin/proot-container ]];then
  clear
  printf '\e[6 q'
  printf '\033[?25l'
  i1=$(($(stty size|awk '{print $2}')))
  let i1=$i1
  i4=$(($i1/2-22))
  echo -e "\033[${i4}G              \e[38;5;157m┌───────────┐"
  echo -e "\033[${i4}G              │ ┌───────┐ │"
  echo -e "\033[${i4}G              │ │  \e[38;5;227m┌───────────┐"
  echo -e "\033[${i4}G              \e[38;5;157m│ │  \e[38;5;227m│ ┌───────┐ │"
  echo -e "\033[${i4}G              \e[38;5;157m│ │  \e[38;5;227m│ │  \e[38;5;157m│ │  \e[38;5;227m│ │"
  echo -e "\033[${i4}G              \e[38;5;157m│ └──\e[38;5;227m│ │\e[38;5;157m──┘ │  \e[38;5;227m│ │"
  echo -e "\033[${i4}G              \e[38;5;157m└────\e[38;5;227m│ │\e[38;5;157m────┘  \e[38;5;227m│ │"
  echo -e "\033[${i4}G                   \e[38;5;227m│ └───────┘ │"
  echo -e "\033[${i4}G                   \e[38;5;227m└───────────┘"
  echo -e "\033[${i4}G\e[38;5;153m═╔╝╔═╝╔═║╔╔ ║ ║║ ║  ╔═╝╔═║╔═ ═╔╝╔═║╝╔═ ╔═╝╔═║"
  echo -e "\033[${i4}G ║ ╔═╝╔╔╝║║║║ ║ ╝ ═╝║  ║ ║║ ║ ║ ╔═║║║ ║╔═╝╔╔╝"
  echo -e "\033[${i4}G ╝ ══╝╝ ╝╝╝╝══╝╝ ╝  ══╝══╝╝ ╝ ╝ ╝ ╝╝╝ ╝══╝╝ ╝"
  i2=0
  while (( $i2<=$i1 ));do
      i2=$(($i2+1))
      echo -e "\e[38;5;159m\033[13H\033[${i2}G="
      sleep 0.01s
  done
  i5=$(($i4+9))
  echo -e "\033[${i5}G\e[38;5;159mMADE WITH  BY MOE-HACKER"|pv -qL 20
  echo -e "\033[${i5}G\e[38;5;159m    KEEP MOE KEEP COOL"|pv -qL 20
  echo -e "\033[${i5}G\e[38;5;159m       NO WARRANTY"|pv -qL 20
  echo -e "\033[${i5}G\e[38;5;159m PRESS ENTER TO CONTINUE"|pv -qL 20
  i2=0
  printf '\033[?25h'
  read
  clear
  curl -L https://raw.githubusercontent.com/Moe-hacker/termux-container/main/LICENSE
  read -p "[] PRESS ENTER TO ACCEPT THIS OR PRESS CTRL-C TO EXIT" NULL
  clear
  echo -e "\a\e[38;5;159m[] INSTALLING PACKAGES"|pv -qL 20
  pkg up -y
  pkg i curl pv proot tar git axel whiptail dos2unix -y
  clear
  echo -e "\a\e[38;5;159m[] CLONING REPOSITORY"|pv -qL 20
  mkdir -p $PREFIX/share/termux-proot-container/
  git clone https://github.com/Moe-hacker/termux-container $PREFIX/share/termux-proot-container/
  cd $PREFIX/share/termux-proot-container/
  mkdir -p proc
  tar -xzvf proc.tar.gz -C proc/
  cp proot-container $PREFIX/bin/
  chmod 777 $PREFIX/bin/proot-container
  dos2unix $PREFIX/bin/proot-container
  clear
  echo -e "\a\e[38;5;159m[] CONFIGURE"|pv -qL 20
  while :
  do
    read -p "[] MOUNT /sdcard ?[y/n]: " MOUNT_SDCARD
    if [[ ${MOUNT_SDCARD} = "n" || ${MOUNT_SDCARD} = "y" ]];then
      break
    fi
  done
  while :
  do
    read -p "[] ENABLE OUTPUT ?[y/n]: " ENABLE_OUTPUT
    if [[ ${ENABLE_OUTPUT} = "n" || ${ENABLE_OUTPUT} = "y" ]];then
      break
    fi
  done
  while :
  do
  echo -e "[] CHOOSE YOUR CURSOR: "
    read -p '[1]: $|   [2]: $▂   [3]: $█ ' CURSOR
    if [[ ${CURSOR} = "1" || ${CURSOR} = "2" || ${CURSOR} = "3" ]];then
      break
    fi
  done
  case ${CURSOR} in
    1) CURSOR=bar;;
    2) CURSOR=underline;;
    3) CURSOR=block;;
  esac
  mkdir -p $PREFIX/etc/proot-container/
  echo MOUNT_SDCARD=${MOUNT_SDCARD} >> $PREFIX/etc/proot-container/global.conf
  echo ENABLE_OUTPUT=${ENABLE_OUTPUT} >> $PREFIX/etc/proot-container/global.conf
  echo CURSOR=${CURSOR} >> $PREFIX/etc/proot-container/global.conf
  echo CONTAINER=1 >> $PREFIX/etc/proot-container/global.conf
  clear
  proot-container -h
fi
####################
######配置检查######
####################
CHECKOUT(){
  if [[ ! -e $PREFIX/etc/proot-container/global.conf ]];then
    echo -e "\033[31m\a[] ERR:CONFIG FILE $PREFIX/etc/proot-container/global.conf DOES NOT EXIST"
    exit
  fi
  export $(cat $PREFIX/etc/proot-container/global.conf) >> ${LOG_FILE}
  if [[ ! -e $PREFIX/etc/proot-container/container-${CONTAINER}.conf ]];then
    if [[ $( ls $PREFIX/etc/proot-container|grep container ) != "" ]];then
      cd $PREFIX/etc/proot-container
      for i in {1..100};do
        if [[ -e container-${i}.conf ]];then
          export $(cat container-${i}.conf)
          echo -e "\e[38;5;159m[$i] $NAME"
        fi
      done
      export $(cat $PREFIX/etc/proot-container/global.conf) >> ${LOG_FILE}
      export CONTAINER_BK=${CONTAINER}
      unset CONTAINER
      while :
      do
        read -p "[] SELECT A CONTAINER: " CONTAINER
        if [[ -e $PREFIX/etc/proot-container/container-${CONTAINER}.conf ]];then
          break
        fi
      done
      sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" $PREFIX/etc/proot-container/global.conf
    else
      echo -e "\033[31m\a[] ERR:YOU SHOULD CREATE A CONTAINER FIRST"
      exit 1
    fi
  fi
  return 0
}
####################
######容器备份######
####################
CONTAINER_BACKUP(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_BACKUP$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  printf "\e[38;5;159m"
  cd $PREFIX/etc/proot-container
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      export $(cat container-${i}.conf)
      echo -e "[$i] $NAME"
      sleep 0.3s
    fi
  done
  while :
  do
    read -p "[] SELECT A CONTAINER TO BACKUP: " CONTAINER
    if [[ -e $PREFIX/etc/proot-container/container-${CONTAINER}.conf ]];then
      break
    fi
  done
  echo -e "[] CHOOSE THE FILE FORMAT: "
  while :
  do
    read -p "[1]tar.gz [2]tar.xz [3]tar [4]tar.bz2 [5]zip " FORMAT
    if [[ $FORMAT = "1" || $FORMAT = "2" || $FORMAT = "3" || $FORMAT = "4" || $FORMAT = "5" ]];then
      break
    fi
  done
  export $(cat $PREFIX/etc/proot-container/container-${CONTAINER}.conf)
  rm -rf $PREFIX/tmp/termux-proot-container
  mkdir -p $PREFIX/tmp/termux-proot-container
  cp container-${CONTAINER}.conf $PREFIX/tmp/termux-proot-container/container.conf
  cd ${PROOT_DIR}
  tar -cvf $PREFIX/tmp/termux-proot-container/rootfs.tar .
  cd $PREFIX/tmp/termux-proot-container
  TARGET=/sdcard/container-${NAME}-$(date +%y%m%d%H%M%S)
  case ${FORMAT} in
    1) tar -zcvPf ${TARGET}.tar.gz .&&echo -e "[] BACKUP FILE IS ${TARGET}.tar.gz" ;;
    2) tar -JcvPf ${TARGET}.tar.xz .&&echo -e "[] BACKUP FILE IS ${TARGET}.tar.xz" ;;
    3) tar -cvPf ${TARGET}.tar .&&echo -e "[] BACKUP FILE IS ${TARGET}.tar" ;;
    4) tar -vcjf ${TARGET}.tar.bz2 .&&echo -e "[] BACKUP FILE IS ${TARGET}.tar.bz2" ;;
    5) zip -q -r ${TARGET}.zip .&&echo -e "[] BACKUP FILE IS ${TARGET}.zip";;
  esac
}
####################
######容器还原######
####################
CONTAINER_RESTORE(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-17))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_RESTORE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  printf "\e[38;5;159m"
  rm -rf $PREFIX/tmp/termux-proot-container
  mkdir -p $PREFIX/tmp/termux-proot-container
  case $1 in
    *tar.gz) tar -xzvPf $1 -C $PREFIX/tmp/termux-proot-container;;
    *tar.xz) tar -xvPf $1 -C $PREFIX/tmp/termux-proot-container;;
    *tar.bz2) tar -vxjf $1 -C $PREFIX/tmp/termux-proot-container;;
    *zip) unzip $1 -d $PREFIX/tmp/termux-proot-container;;
    *tar) tar -xvPf $1 -C $PREFIX/tmp/termux-proot-container;;
    *) echo -e "\033[31m[] ERR:UNKNOW FILE FORMAT";exit 1;;
  esac
  cd $PREFIX/tmp/termux-proot-container
  export $(cat container.conf)
  mkdir -p ${PROOT_DIR}
  tar -xvf rootfs.tar -C ${PROOT_DIR}
  printf "\033[0m"
  export $(cat $PREFIX/etc/proot-container/global.conf)
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  for i1 in {1..100};do
    if [[ ! -e $PREFIX/etc/proot-container/container-${i1}.conf ]];then
      CONTAINER=$i1
      break
    fi
  done
  mkdir -p $PREFIX/etc/proot-container
  mv container.conf $PREFIX/etc/proot-container/container-${CONTAINER}.conf
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" $PREFIX/etc/proot-container/global.conf
  return 0
  exit 0
}
####################
######容器删除######
####################
CONTAINER_REMOVE(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_REMOVE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  printf "\e[38;5;159m"
  cd $PREFIX/etc/proot-container
  for i in {1..100};do
  if [[ -e container-${i}.conf ]];then
      export $(cat container-${i}.conf)
      echo -e "[$i] $NAME"
  fi
  done
  while :
  do
    read -p "[] SELECT A CONTAINER TO DELEATE: " CONTAINER
    if [[ -e $PREFIX/etc/proot-container/container-${CONTAINER}.conf ]];then
      break
    fi
  done
  echo -e "\a[] ALL YOUR FILES IN THIS CONTAINER WILL BE DELEATED"|pv -qL 40
  echo -e "\a[] PRESS ENTER TO CONTINUE OR PRESS CTRL-C TO EXIT"|pv -qL 40
  read
  export $(cat $PREFIX/etc/proot-container/container-${CONTAINER}.conf)
  clear
  if [[ ${PROOT_DIR} = "" ]];then
    rm $PREFIX/etc/proot-container/container-${CONTAINER}.conf&&exit
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] REMOVING CONTAINER ${NAME}"
  sleep 2s
  if [[ ${PROOT_DIR} != "" ]];then
    chmod -v -R 777 ${PROOT_DIR}
    rm -rfv ${PROOT_DIR}
  fi
  rm $PREFIX/etc/proot-container/container-${CONTAINER}.conf
  unset CONTAINER
  if [[ $( ls $PREFIX/etc/proot-container|grep container ) != "" ]];then
    cd $PREFIX/etc/proot-container
    for i in {1..100};do
      if [[ -e container-${i}.conf ]];then
        export $(cat container-${i}.conf)
        echo -e "\e[38;5;159m[$i] $NAME"
      fi
    done
    export $(cat $PREFIX/etc/proot-container/global.conf)
    export CONTAINER_BK=${CONTAINER}
    unset CONTAINER
    while :
    do
      read -p "[] SELECT A CONTAINER: " CONTAINER
      if [[ -e $PREFIX/etc/proot-container/container-${CONTAINER}.conf ]];then
        break
      fi
    done
    sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" $PREFIX/etc/proot-container/global.conf
  fi
  printf "\033[0m"
  return 0
  exit 0
}
####################
######架构获取######
####################
CHECK_ARCH(){
  DPKG_ARCH=$(dpkg --print-architecture)
  case ${DPKG_ARCH} in
    armel) export ARCH="armel" ;;
    armv7* | armv8l | armhf | arm) export ARCH="armhf" ;;
    aarch64 | arm64* | armv8* | arm*) export ARCH="arm64" ;;
    i*86 | x86) export ARCH="i386" ;;
    x86_64 | amd64) export ARCH="amd64" ;;
    *) echo -e "\e[38;5;196m\aERR:Unknow cpu arch!"&&exit 0 ;;
  esac
  return 0
}
####################
######容器下载######
####################
CONTAINER_DOWNLOAD(){
  if [[ ${CROSS_ARCH} != "null" ]];then
    case ${CROSS_ARCH} in
      "aarch64") export ARCH="arm64";;
      "arm") export ARCH="armhf";;
      "i386") export ARCH="i386";;
      "m68k") export ARCH="m68k";;
      "ppc") export ARCH="ppc";;
      "ppc64") export ARCH="ppc64";;
      "riscv32") export ARCH="riscv32";;
      "riscv64") export ARCH="riscv64";;
      "x86_64") export ARCH="amd64";;
    esac
  else
    CHECK_ARCH
  fi
  export OS=$1
  export VERSION=$2
  DOWNLOAD_COMMON_ROOTFS(){
    MIRROR="https://mirrors.tuna.tsinghua.edu.cn/lxc-images/images/"
    if [[ $OS = "gentoo" ]];then
      VERSION2="openrc"
    else
      VERSION2="default"
    fi
    TIME=$(curl -sL ${MIRROR}${OS}/${VERSION}/${ARCH}/${VERSION2}|grep title |sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2 | tail -n 1)
    if [[ ${TIME} = ""||${TIME} = "/static/img/favicon.png" ]];then
      echo -e "\e[38;5;196m\aERR:Unable to find rootfs!"
      exit 1
    fi
    [[ -e $PREFIX/tmp/proot-container ]]||mkdir -p $PREFIX/tmp/proot-container
    cd $PREFIX/tmp/proot-container
    URL=${MIRROR}${OS}/${VERSION}/${ARCH}/${VERSION2}/${TIME}rootfs.tar.xz
    axel -n16 ${URL}
    return 0
  }
  DOWNLOAD_PARROT_ROOTFS(){
    mkdir -p $PREFIX/tmp/proot-container
    cd $PREFIX/tmp/proot-container
    ROOTFS=$(curl -sL https://mirrors.tuna.tsinghua.edu.cn/parrot/iso/testing|grep title|sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2|tail -n +5|grep ".tar.xz"|grep ${ARCH}|head -n 1)
    if [[ ${ROOTFS} = "" ]];then
      echo -e "\e[38;5;196m\aERR:Unable to find rootfs!"
      exit 1
    fi
    URL="https://mirrors.tuna.tsinghua.edu.cn/parrot/iso/testing/${ROOTFS}"
    axel -n16 ${URL}
    echo "Building parrot rootfs,this might take a while..."
    sleep 2s
    tar -xvf ${ROOTFS}
    cd parrot-${ARCH}
    tar -cvJf ../rootfs.tar.xz .
    cd ..
    rm ${ROOTFS}
    rm -rf parrot-${ARCH}
    return 0
  }
  case $OS in
      "parrot") DOWNLOAD_PARROT_ROOTFS;;
      *) DOWNLOAD_COMMON_ROOTFS;;
  esac
  return 0
}
####################
######容器创建######
####################
CONTAINER_CREATE(){
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_CREATE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  sleep 0.1s
  printf  "\e[38;5;159m"
  while :
  do
    read -p "[] ENTER THE NAME OF THIS CONTAINER: " NAME
    if [[ $NAME != "" ]];then
      break
    fi
  done
  read -p "[] ENTER THE PATH OF THIS CONTAINER(must be in /data/data/com.termux/files/home): " PROOT_DIR
  if [[ -e $PROOT_DIR ]];then
    echo -e "[] WARNING: DIRECTORY ALREADY EXISTS"
  fi
  while :
  do
    read -p "[] CROSS ARCH [y/n]?" CROSS
    if [[ ${CROSS} = "n" || ${CROSS} = "y" ]];then
      break
    fi
  done
  if [[ ${CROSS} = "y" ]];then
    echo -e "[1]aarch64 [2]arm     [3]i386    [4]m68k [5]ppc"
    echo -e "[6]ppc64   [7]riscv32 [8]riscv64 [9]x86-64"
    read -p "CHOOSE YOUR ARCH TO SIMULATE:" ARCH
    case ${ARCH} in
      "1") apt install qemu-user-aarch64&&export CROSS_ARCH="aarch64";;
      "2") apt install qemu-user-arm&&export CROSS_ARCH="arm";;
      "3") apt install qemu-user-i386&&export CROSS_ARCH="i386";;
      "4") apt install qemu-user-m68k&&export CROSS_ARCH="m68k";;
      "5") apt install qemu-user-ppc&&export CROSS_ARCH="ppc";;
      "6") apt install qemu-user-ppc64&&export CROSS_ARCH="ppc64";;
      "7") apt install qemu-user-riscv32&&export CROSS_ARCH="riscv32";;
      "8") apt install qemu-user-riscv64&&export CROSS_ARCH="riscv64";;
      "9") apt install qemu-user-x86-64&&export CROSS_ARCH="x86_64";;
    esac
  else
    export CROSS_ARCH="null"
  fi
  while :
  do
    read -p "[] AUTOMATICALLY GET ROOTFS DOWNLOAD LINK [y/n]?" AUTO_GET_LINK
    if [[ ${AUTO_GET_LINK} = "n" || ${AUTO_GET_LINK} = "y" ]];then
      break
    fi
  done
  if [[ ${AUTO_GET_LINK} = "n" ]];then
    echo -e "[] YOU CAN GO TO \033[4mhttp://images.linuxcontainers.org/images\033[0m\e[38;5;159m TO GET THE LINK OF YOUR ROOTFS OR USE CUSTOM ROOTFS"|pv -qL 40
    while :
    do
      read -p "[] ENTER THE ROOTFS DOWNLOAD LINK OR THE PATH OF YOUR CUSTOM ROOTFS: " LINK
      if [[ $LINK != "" ]];then
        break
      fi
    done
  fi
  rm -rf $PREFIX/tmp/proot-container
  mkdir -p $PREFIX/tmp/proot-container
  cd $PREFIX/tmp/proot-container
  if [[ ${AUTO_GET_LINK} = "y" ]];then
    echo -e "CURRENTLY SUPPORTED OS:"
    echo -e "debian,ubuntu,kali,parrot,fedora,centos,archlinux,alpine,oracle,amazonlinux,voidlinux,opensuse,almalinux,alt,apertis,rockylinux,devuan,gentoo"
    read -p "CHOOSE THE OS TO INSTALL:" OS
    case $OS in
      "amazonlinux"|"archlinux"|"kali"|"voidlinux"|"parrot")
        CONTAINER_DOWNLOAD $OS current;;
      *)
        echo -e "CURRENTLY SUPPORTED VERSIONS:"
        for i in $(curl -sL http://images.linuxcontainers.org/images/${OS}|grep "DIR"|sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2 |cut -d "/" -f 1);do
          echo $i
        done
        read -p "CHOOSE THE VERSION TO INSTALL:" VERSION
        CONTAINER_DOWNLOAD $OS $VERSION;;
    esac
  else
    axel -n16 ${LINK}||cp ${LINK} ./||exit 0
  fi
  mkdir -p ${PROOT_DIR}
  ROOTFS=$(ls $PREFIX/tmp/proot-container/)
  case $ROOTFS in
    *tar.gz|*tgz) tar -xzvf $PREFIX/tmp/proot-container/$ROOTFS -C ${PROOT_DIR};;
    *tar.xz|*txz|*tar) tar -xvf $PREFIX/tmp/proot-container/$ROOTFS -C ${PROOT_DIR};;
    *) echo "\a\033[31m[] ERR:UNKNOW FILE FORMAT";exit 0;;
  esac
  rm -f ${PROOT_DIR}/etc/resolv.conf
  echo nameserver 8.8.8.8 >> ${PROOT_DIR}/etc/resolv.conf
  echo nameserver 114.114.114.114 >> ${PROOT_DIR}/etc/resolv.conf
  cp $PREFIX/share/termux-proot-container/group_add.sh ${PROOT_DIR}/tmp/
  chmod 777 ${PROOT_DIR}/tmp/group_add.sh
  for i1 in {1..100};do
    if [[ ! -e $PREFIX/etc/proot-container/container-${i1}.conf ]];then
      CONTAINER=$i1
      break
    fi
  done
  echo NAME=${NAME} >> $PREFIX/etc/proot-container/container-${CONTAINER}.conf
  echo PROOT_DIR=${PROOT_DIR} >> $PREFIX/etc/proot-container/container-${CONTAINER}.conf
  echo CROSS_ARCH=${CROSS_ARCH} >> $PREFIX/etc/proot-container/container-${CONTAINER}.conf
  export NEW_CONTAINER=${CONTAINER}
  export $(cat $PREFIX/etc/proot-container/global.conf)
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$NEW_CONTAINER/" $PREFIX/etc/proot-container/global.conf
  COMMAND="proot --link2symlink --kill-on-exit --sysvipc -0 -r ${PROOT_DIR} -b /dev -b /sys -b /proc -w /root"
  if [[ ${CROSS_ARCH} != "null" ]];then
    COMMAND+=" -q qemu-${CROSS_ARCH}"
  fi
  unset LD_PRELOAD
  exec ${COMMAND} /tmp/group_add.sh >> ${LOG_FILE} 2&>1
}
####################
######容器切换######
####################
CONTAINER_SWITCH(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_SWITCH$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  cd $PREFIX/etc/proot-container
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      export $(cat container-${i}.conf)
      echo -e "\e[38;5;159m[$i] $NAME"
    fi
  done
  export $(cat $PREFIX/etc/proot-container/global.conf)
  export $(cat $PREFIX/etc/proot-container/container-${CONTAINER}.conf)
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  while :
  do
    read -p "[] SELECT A CONTAINER: " CONTAINER
    if [[ -e $PREFIX/etc/proot-container/container-${CONTAINER}.conf ]];then
      break
    fi
  done
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" $PREFIX/etc/proot-container/global.conf
  return 0
  exit 0
}
####################
######容器运行######
####################
CONTAINER_RUN(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  export $(cat $PREFIX/etc/proot-container/container-${CONTAINER}.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||printf '\e[38;5;159m\033[?25l'
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-13))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_RUN$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m    _________      [\e[38;5;153m\e[38;5;159m] CONTAINER: \e[38;5;153m${NAME}"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m   /        /\\     [\e[38;5;153m\e[38;5;159m] ARCH: \e[38;5;153m$(uname -m)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m  /        /  \\    [\e[38;5;153m\e[38;5;159m] CROSS_ARCH: \e[38;5;153m${CROSS_ARCH}"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m /        /    \\   [\e[38;5;153m\e[38;5;159m] KERNEL: \e[38;5;153m$(uname -r)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m/________/      \\  [\e[38;5;153m\e[38;5;159m] TIME: \e[38;5;153m$(date|awk '{print $4}')"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m\\        \\      /  [\e[38;5;153m\e[38;5;159m] HOSTNAME: \e[38;5;153m$(hostname)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m \\        \\    /   [\e[38;5;153m\e[38;5;159m] ANDROID: \e[38;5;153m$(getprop ro.build.version.release)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m  \\        \\  /    [\e[38;5;153m\e[38;5;159m] PROOT_DIR: \e[38;5;153m${PROOT_DIR}"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] VERSION: \e[38;5;153m6.0"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m〉\e[38;5;153mTERMUX-CONTAINER"
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m$(yes "─"|sed $i1'q'|tr -d '\n')"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//////"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  unset LD_PRELOAD
  COMMAND="proot"
  COMMAND+=" --link2symlink"
  COMMAND+=" --kill-on-exit"
  COMMAND+=" --sysvipc"
  COMMAND+=" -0"
  COMMAND+=" -r ${PROOT_DIR}"
  COMMAND+=" -b /dev"
  COMMAND+=" -b /sys"
  COMMAND+=" -b /proc"
  COMMAND+=" -w /root"
  if [[ ${MOUNT_SDCARD} = "y" ]];then
    COMMAND+=" -b /sdcard"
  fi
  if [[ ${CROSS_ARCH} != "null" ]];then
    COMMAND+=" -q qemu-${CROSS_ARCH}"
  fi
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/buddyinfo:/proc/buddyinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/cgroups:/proc/cgroups"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/consoles:/proc/consoles"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/crypto:/proc/crypto"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/devices:/proc/devices"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/diskstats:/proc/diskstats"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/execdomains:/proc/execdomains"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/fb:/proc/fb"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/filesystems:/proc/filesystems"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/interrupts:/proc/interrupts"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/iomem:/proc/iomem"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/ioports:/proc/ioports"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/kallsyms:/proc/kallsyms"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/key-users:/proc/key-users"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/keys:/proc/keys"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/kpageflags:/proc/kpageflags"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/loadavg:/proc/loadavg"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/locks:/proc/locks"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/misc:/proc/misc"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/modules:/proc/modules"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/pagetypeinfo:/proc/pagetypeinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/partitions:/proc/partitions"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/sched_debug:/proc/sched_debug"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/softirqs:/proc/softirqs"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/timer_list:/proc/timer_list"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/uptime:/proc/uptime"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/version:/proc/version"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/vmallocinfo:/proc/vmallocinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/vmstat:/proc/vmstat"
  COMMAND+=" --mount=$PREFIX/share/termux-proot-container/proc/zoneinfo:/proc/zoneinfo"
  COMMAND+=" /bin/su - root"
  case ${CURSOR} in
    block)     printf '\e[2 q';;
    bar)       printf '\e[6 q';;
    underline) printf '\e[4 q';;
  esac
  printf "\033[?25h\033[0m"
  exec ${COMMAND}
  return 0
  exit 0
}
####################
######帮助信息######
####################
CONTAINER_HELP(){
  echo -e "              \e[38;5;157m┌───────────┐"
  echo -e "              │ ┌───────┐ │"
  echo -e "              │ │  \e[38;5;227m┌───────────┐"
  echo -e "              \e[38;5;157m│ │  \e[38;5;227m│ ┌───────┐ │"
  echo -e "              \e[38;5;157m│ │  \e[38;5;227m│ │  \e[38;5;157m│ │  \e[38;5;227m│ │"
  echo -e "              \e[38;5;157m│ └──\e[38;5;227m│ │\e[38;5;157m──┘ │  \e[38;5;227m│ │"
  echo -e "              \e[38;5;157m└────\e[38;5;227m│ │\e[38;5;157m────┘  \e[38;5;227m│ │"
  echo -e "                   \e[38;5;227m│ └───────┘ │"
  echo -e "                   \e[38;5;227m└───────────┘"
  echo -e "\e[38;5;153m═╔╝╔═╝╔═║╔╔ ║ ║║ ║  ╔═╝╔═║╔═ ═╔╝╔═║╝╔═ ╔═╝╔═║"
  echo -e " ║ ╔═╝╔╔╝║║║║ ║ ╝ ═╝║  ║ ║║ ║ ║ ╔═║║║ ║╔═╝╔╔╝"
  echo -e " ╝ ══╝╝ ╝╝╝╝══╝╝ ╝  ══╝══╝╝ ╝ ╝ ╝ ╝╝╝ ╝══╝╝ ╝"
  echo -e "\e[38;5;159mThis script has no Super Cow Powers"
  echo -e "Usage:"
  echo -e " container                   #Show menu"
  echo -e " proot-container -run              #Run container"
  echo -e " proot-container -c                #Creat a new container"
  echo -e " proot-container -S                #Switch container"
  echo -e " proot-container -s                #Settings"
  echo -e " proot-container -r                #Remove a container"
  echo -e " proot-container -bk               #Backup container"
  echo -e " proot-container -R [backup file]  #Restore container"
  echo -e " proot-container -v                #Display version"
  echo -e " proot-container -U                #Uninstall this script"
  echo -e " proot-container -h                #Show this page\033[0m"
  return 0
}
####################
######版本信息######
####################
CONTAINER_VERSION(){
  printf '\e[38;5;159m'
  echo -e "[] (>_×)"
  echo -e "[] NAME: TERMUX-CONTAINER"
  echo -e "[] AUTHOR: Moe-hacker"
  echo -e "[] LICENSE: APACHE-2.0"
  echo -e "[] NO WARRANTY"
  echo -e '[] VERSION: 6.0\033[0m'
  return 0
  exit 0
}
####################
######容器设置######
####################
CONTAINER_SETTINGS(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-18))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_SETTINGS$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  export $(cat $PREFIX/etc/proot-container/global.conf)
  echo -e "------SETTINGS------"
  echo -e "[] ENABLE_OUTPUT:${ENABLE_OUTPUT}"
  echo -e "[] MOUNT_SDCARD:${MOUNT_SDCARD}"
  echo -e "[] CURSOR:${CURSOR}"
  echo -e "[] CONTAINER:${CONTAINER}"
  read -p "PRESS ENTER TO EDIT THE CONFIG FILE OR PRESS CTRL-C TO EXIT" NULL
  nano $PREFIX/etc/proot-container/global.conf
  return 0
  exit 0
}
####################
######卸载程序######
####################
CONTAINER_UNINSTALL(){
  export $(cat $PREFIX/etc/proot-container/global.conf)
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-19))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_UNINSTALL$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  echo -e "\a\e[38;5;159m[] PRESS ENTER TO UNINSTALL THIS SCRIPT OR PRESS CTRL-C TO EXIT"|pv -qL 40
  read
  while :
  do
    read -p "[] REMOVE YOUR CONTAINERS [y/n]?" REMOVE_CONTAINERS
    if [[ ${REMOVE_CONTAINERS} = "n" || ${REMOVE_CONTAINERS} = "y" ]];then
      break
    fi
  done
  echo -e "\a[] UNINSTALLING"
  if [[ ${REMOVE_CONTAINERS} = "y" ]];then
    cd $PREFIX/etc/proot-container
    for i in {1..100};do
        if [[ -e container-${i}.conf ]];then
          export $(cat $PREFIX/etc/proot-container/container-${i}.conf)
          read -p "REMOVE CONTAINER ${NAME}?[y/n]" REMOVE
          if [[ $REMOVE = "n" ]];then
            continue
          fi
          if [[ ${PROOT_DIR} != "" ]];then
            rm -rfv ${PROOT_DIR}
          fi
        fi
        unset REMOVE
    done
  fi
  [[ ${REMOVE_CONTAINERS} = "n" ]]||rm -rvf $PREFIX/etc/proot-container
  rm -fv $PREFIX/etc/proot-container/global.conf
  rm -rvf $PREFIX/share/termux-proot-container
  rm -fv $PREFIX/bin/proot-container
  rm -fv $PREFIX/var/log/proot-container.log
  echo -e "[] UNINSTALL DONE"
  echo -e "[] GOODBYE!"
  return 0
  exit 0
}
####################
######容器菜单######
####################
CONTAINER_MENU(){
  printf '\e[38;5;159m'
  WIDTH=$(($(stty size|awk '{print $2}')-4))
  OPTION=$(whiptail --title "Container menu" --menu "Choose your option" 16 $WIDTH 9 \
  "1" "Run container" \
  "2" "Create a new container" \
  "3" "Switch container"  \
  "4" "Backup container" \
  "5" "Restore container" \
  "6" "Remove container" \
  "7" "Settings" \
  "8" "Display version" \
  "9" "Uninstall this script" \
  "10" "Show helps" \
  "11" "Exit" 3>&1 1>&2 2>&3)
  case $OPTION in
    "1") proot-container -run;;
    "2") proot-container -c;;
    "3") proot-container -S;;
    "4") proot-container -bk;;
    "5") read -p "Backup file:" BKFILE&&proot-container -R $BKFILE;;
    "6") proot-container -r;;
    "7") proot-container -s;;
    "8") proot-container -v;;
    "9") proot-container -U;;
    "10") proot-container -h;;
    "11") exit;;
  esac
  return 0
  exit 0
}
####################
######调用函数######
####################
case $1 in
  *run)    CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_RUN&&CONTAINER_LOG_END;;
  *h)      CONTAINER_LOG_HEAD&&CONTAINER_HELP&&CONTAINER_LOG_END;;
  *s)      CONTAINER_LOG_HEAD&&CONTAINER_SETTINGS&&CONTAINER_LOG_END;;
  *c)      CONTAINER_LOG_HEAD&&CONTAINER_CREATE&&CONTAINER_LOG_END;;
  *r)      CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_REMOVE&&CONTAINER_LOG_END;;
  *R)      CONTAINER_LOG_HEAD&&CONTAINER_RESTORE $2&&CONTAINER_LOG_END;;
  *bk)     CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_BACKUP&&CONTAINER_LOG_END;;
  *S)      CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_SWITCH&&CONTAINER_LOG_END;;
  *v)      CONTAINER_LOG_HEAD&&CONTAINER_VERSION&&CONTAINER_LOG_END;;
  *U)      CONTAINER_LOG_HEAD&&CONTAINER_UNINSTALL&&CONTAINER_LOG_END;;
  "")      CONTAINER_MENU;;
  *)       CONTAINER_LOG_HEAD&&CONTAINER_HELP&&CONTAINER_LOG_END;;
esac
####################
######水个注释######
####################
#                   _ooOoo_
#                  o8888888o
#                  88" . "88
#                  (| -_- |)
#                  O\  =  /O
#               ____/`---'\____
#             .'  \\|     |//  `.
#            /  \\|||  :  |||//  \
#           /  _||||| -:- |||||-  \
#           |   | \\\  -  /// |   |
#           | \_|  ''\---/''  |   |
#           \  .-\__  `-`  ___/-. /
#         ___`. .'  /--.--\  `. . __
#      ."" '<  `.___\_<|>_/___.'  >'"".
#     | | :  `- \`.;`\ _ /`;.`/ - ` : | |
#     \  \ `-.   \_ __\ /__ _/   .-` /  /
#======`-.____`-.___\_____/___.-`____.-'======
#                   `=---='
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#           佛祖保佑        永无BUG
#
#没人比我更懂水注释(👻)
#copyright 2022 Moe-hacker (Author)
# ██╗ ██╗  ███████╗   ████╗   ███████╗
#████████╗ ██╔════╝ ██╔═══██╗ ██╔════╝
#╚██╔═██╔╝ █████╗   ██║   ██║ █████╗
#████████╗ ██╔══╝   ██║   ██║ ██╔══╝
#╚██╔═██╔╝ ███████╗ ╚██████╔╝ ██║
# ╚═╝ ╚═╝  ╚══════╝  ╚═════╝  ╚═╝
